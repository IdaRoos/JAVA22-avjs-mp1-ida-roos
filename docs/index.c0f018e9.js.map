{"mappings":"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","sources":["src/modules/highscore.js","src/js/main.js","src/modules/game.js"],"sourcesContent":["const scoreDiv = document.getElementById(\"score-list\");\n\n// Fetches the highscores from a Firebase database, sorts them by score, and displays them on the page\nexport async function getHighscore() {\n  const url =\n    \"https://highscore-d0cb5-default-rtdb.europe-west1.firebasedatabase.app/highscores.json\";\n  const response = await fetch(url);\n  const data = await response.json();\n\n  const highScore = Object.entries(data);\n\n  highScore.sort((a, b) => b[1].score - a[1].score);\n\n  for (const [key, userObj] of highScore) {\n    const name = userObj.name;\n    const score = userObj.score;\n    const ol = document.createElement(\"ul\");\n    const nameP = document.createElement(\"li\");\n    const scoreP = document.createElement(\"li\");\n    nameP.innerText = \"Name: \" + name;\n    scoreP.innerText = \"Score: \" + score;\n    scoreDiv.append(ol);\n    ol.append(nameP, scoreP);\n  }\n}\n\n// Adds a highscore to the Firebase database if the score is higher than the lowest score in the database\nexport async function addHighscore(name, score) {\n  const url =\n    \"https://highscore-d0cb5-default-rtdb.europe-west1.firebasedatabase.app/highscores.json\";\n  const response = await fetch(url);\n  const data = await response.json();\n  const highScore = Object.entries(data);\n\n  let lowestScore = Infinity;\n  let lowestScoreKey = null;\n\n  for (const [key, userObj] of highScore) {\n    if (userObj.score < lowestScore) {\n      lowestScore = userObj.score;\n      lowestScoreKey = key;\n    }\n  }\n\n  // Replace the lowest score if the new score is higher\n  if (score > lowestScore) {\n    patchFunction(name, score, lowestScoreKey);\n  }\n  await getHighscore();\n}\n\n// Sends a PATCH request to update the highscore in the Firebase database\nexport async function patchFunction(inputName, inputScore, key) {\n  const newURL = `https://highscore-d0cb5-default-rtdb.europe-west1.firebasedatabase.app/highscores/${key}.json`;\n\n  const newHighscore = {\n    name: inputName,\n    score: inputScore,\n  };\n\n  const options = {\n    method: \"PATCH\",\n    body: JSON.stringify(newHighscore),\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n\n  const newResponse = await fetch(newURL, options);\n  await newResponse.json();\n}\n","import { Game } from \"../modules/game.js\";\nconst game = new Game();\n","import { addHighscore, getHighscore } from \"./highscore.js\";\n\nexport class Game {\n  constructor() {\n    // Initialize variables to store HTML elements\n    this.textFromInput = \"Anonymous player\";\n    this.playerName = document.querySelector(\"#player\");\n    this.gameContainer = document.querySelector(\"#gameContainer\");\n    this.computerText = document.querySelector(\"#computer\");\n    this.resultText = document.querySelector(\"#resultText\");\n    this.choiceBtn = document.querySelectorAll(\".choiceBtn\");\n    this.playerScoreText = document.querySelector(\"#scorePlayer\");\n\n    this.playerChoice;\n    this.computerChoice;\n\n    this.playerScore = 0;\n    this.computerScore = 0;\n\n    this.nameInput = document.querySelector(\"#inputName\");\n    this.nameButton = document.querySelector(\"#buttonName\");\n    this.nameButton.addEventListener(\"click\", this.handleNameSubmit.bind(this));\n    this.choiceBtn.forEach((button) =>\n      button.addEventListener(\"click\", this.handleChoiceClick.bind(this))\n    );\n  }\n\n  // Handle submit event for player name input\n  handleNameSubmit(event) {\n    event.preventDefault();\n    this.textFromInput =\n      this.nameInput.value === \"\" ? \"Anonymous player\" : this.nameInput.value;\n    this.playerName.innerText = this.textFromInput + \": \";\n    document.querySelector(\"form\").innerHTML = \"\";\n    this.resultText.innerText = \"Let's play!\";\n  }\n\n  // Handle click event for player choice buttons\n  handleChoiceClick(event) {\n    this.playerChoice = event.target.value;\n    this.playerName.textContent = `${this.textFromInput}: ${this.playerChoice}`;\n    this.computerChoiceFunc();\n    this.computerText.textContent = `Computer: ${this.computerChoice}`;\n    this.resultText.textContent = this.checkWinner();\n    this.playerScoreText.textContent = `Your score: ${this.playerScore}`;\n    this.endGame();\n  }\n\n  // Generate a random number to select computer's choice\n  computerChoiceFunc() {\n    let randomNumb = this.getRandomNumber();\n    switch (randomNumb) {\n      case 1:\n        this.computerChoice = \"ROCK\";\n        break;\n      case 2:\n        this.computerChoice = \"PAPER\";\n        break;\n      case 3:\n        this.computerChoice = \"SCISSORS\";\n        break;\n    }\n  }\n\n  // Check if player or computer is winner\n  checkWinner() {\n    if (this.playerChoice === this.computerChoice) {\n      return \"It's a tie!\";\n    } else if (this.computerChoice === \"ROCK\") {\n      if (this.playerChoice === \"PAPER\") {\n        this.playerScore++;\n        return `You win! Paper beats rock.`;\n      } else {\n        this.computerScore++;\n        return \"You lose... Paper beats rock.\";\n      }\n    } else if (this.computerChoice === \"PAPER\") {\n      if (this.playerChoice === \"SCISSORS\") {\n        this.playerScore++;\n        return \"You win! Scissors beats paper.\";\n      } else {\n        this.computerScore++;\n        return \"You lose... Paper beats rock.\";\n      }\n    } else if (this.computerChoice === \"SCISSORS\") {\n      if (this.playerChoice === \"ROCK\") {\n        this.playerScore++;\n        return \"You win! Rock beats scissors\";\n      } else {\n        this.computerScore++;\n        return \"You lose... Scissors beats paper.\";\n      }\n    }\n  }\n  // If computer gets 1 point, end game and call highscore functions\n  async endGame() {\n    if (this.computerScore === 1) {\n      await addHighscore(this.textFromInput, this.playerScore);\n      // update the highscore list\n      const scoreDiv = document.getElementById(\"score-list\");\n      scoreDiv.innerHTML = \"\"; // clear the scoreDiv\n      await getHighscore(); // call getHighscore again to update the list\n      const playAgainBtn = document.createElement(\"button\");\n      playAgainBtn.classList.add(\"playAgain\");\n      playAgainBtn.innerText = \"Play again\";\n      const winnerText = \"You lost...Your score is: \" + this.playerScore;\n      const gameChoice = document.querySelector(\"#gameChoice\");\n      gameChoice.remove();\n      this.resultText.innerText = `${winnerText} `;\n      this.gameContainer.append(playAgainBtn);\n      playAgainBtn.addEventListener(\"click\", () => {\n        location.reload();\n      });\n    }\n  }\n\n  getRandomNumber() {\n    return Math.ceil(Math.random() * 3);\n  }\n}\n"],"names":["$1dbe79ed6ae4da18$var$scoreDiv","document","getElementById","async","$1dbe79ed6ae4da18$export$324a59f4a7abce50","response","fetch","data","json","highScore","Object","entries","sort","a","b","score","key","userObj","name","ol","createElement","nameP","scoreP","innerText","append","$1dbe79ed6ae4da18$export$69f4796e91397629","lowestScore","Infinity","lowestScoreKey","inputName","inputScore","newURL","newHighscore","options","method","body","JSON","stringify","headers","newResponse","$1dbe79ed6ae4da18$export$6acd8f6a2851c77f","constructor","this","textFromInput","playerName","querySelector","gameContainer","computerText","resultText","choiceBtn","querySelectorAll","playerScoreText","playerChoice","computerChoice","playerScore","computerScore","nameInput","nameButton","addEventListener","handleNameSubmit","bind","forEach","button","handleChoiceClick","event","preventDefault","value","innerHTML","target","textContent","computerChoiceFunc","checkWinner","endGame","getRandomNumber","playAgainBtn","classList","add","winnerText","remove","location","reload","Math","ceil","random"],"version":3,"file":"index.c0f018e9.js.map"}